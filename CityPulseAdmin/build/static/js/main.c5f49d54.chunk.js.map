{"version":3,"sources":["firebase.js","context/UserAuthContext.js","components/Home.js","components/Login.js","services/cellDataService.js","components/MapComponent.js","components/Maps.js","components/ProtectedRoute.js","components/Signup.js","App.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","db","getFirestore","userAuthContext","createContext","UserAuthContextProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","user","setUser","useEffect","unsubscribe","onAuthStateChanged","currentuser","console","log","_jsx","Provider","value","logIn","email","password","signInWithEmailAndPassword","signUp","createUserWithEmailAndPassword","logOut","signOut","googleSignIn","googleAuthProvider","GoogleAuthProvider","signInWithPopup","useUserAuth","useContext","Home","_useUserAuth","navigate","useNavigate","userInput","setUserInput","_useState3","_useState4","submittedText","setSubmittedText","_useState5","_useState6","reflexVerdicts","setReflexVerdicts","_useState7","_useState8","reactVerdicts","setReactVerdicts","_useState9","_useState10","loading","setLoading","_useState11","_useState12","reactLoading","setReactLoading","_useState13","_useState14","error","setError","_useState15","_useState16","reactError","setReactError","handleLogout","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","t0","message","stop","apply","arguments","fetchReflexVerdicts","_ref2","_callee2","querySnapshot","verdicts","_context2","getDocs","collection","sent","forEach","doc","push","_objectSpread","id","data","finish","fetchReactVerdicts","_ref3","_callee3","_context3","formatFieldName","fieldName","split","map","word","charAt","toUpperCase","slice","join","formatFieldValue","undefined","seconds","Date","toLocaleString","_lat","_long","concat","toFixed","Array","isArray","toString","JSON","stringify","getConfidenceBadge","confidence","getStatusBadge","status","toLowerCase","getVerdictText","verdictObj","fallback","length","verdict","renderMarkdown","markdown","html","replace","startsWith","_jsxs","className","style","width","marginLeft","left","position","Link","to","Button","variant","onClick","Spinner","animation","role","Accordion","index","_verdict$sources","_verdict$sources2","_verdict$sources3","Item","eventKey","Header","cell_id","crowd_confidence","Badge","bg","fontSize","category","location","maxWidth","Body","Card","coordinates","processed_at","timestamp","sources","news_count","social_media_count","weather_alert_count","image","news","articles","_Fragment","social_media","social_media_posts","weather_alerts","alerts","Object","keys","filter","key","includes","entries","_ref4","_ref6","_ref7","final_verdict","processing_time_sec","start_time","end_time","analysis","dangerouslySetInnerHTML","__html","lineHeight","thought_process","thought","idx","actions","action","text","action_needed","executed","result","_ref8","_ref10","_ref11","borderTop","Form","onSubmit","e","preventDefault","Control","as","rows","placeholder","onChange","target","borderRadius","minHeight","resize","padding","type","height","whiteSpace","getFullYear","Login","setEmail","setPassword","handleSubmit","_x","handleGoogleSignIn","_x2","color","Alert","Group","controlId","borderColor","backgroundColor","border","GoogleButton","boxShadow","fetchCellData","cellDataCollection","cellDataSnapshot","cellDataList","docs","abrupt","getLocationName","lat","lng","geocoder","window","google","maps","Geocoder","Promise","resolve","reject","geocode","results","address","formatted_address","locality","address_components","find","component","types","long_name","MapComponent","center","zoom","ref","useRef","setMap","setRectangles","infoWindow","setInfoWindow","cellData","setCellData","homeMarker","setHomeMarker","total","withIncidents","withPredictions","setGridStats","loadCellData","totalCells","cellsWithIncidents","cellsWithPredictions","cell","min_lat","max_lat","min_lon","max_lon","min_lng","max_lng","incidents","predicted","hasValidCoords","createTestGrid","minLat","maxLat","minLng","maxLng","testCells","bounds","getBounds","getSouthWest","getNorthEast","latStep","lngStep","i","j","cellMinLat","cellMaxLat","cellMinLng","cellMaxLng","Math","random","floor","c","current","mapInstance","Map","mapTypeControl","streetViewControl","fullscreenControl","mapTypeId","infoWindowInstance","InfoWindow","marker","Marker","title","icon","url","scaledSize","Size","createGridRectangles","React","useCallback","newRectangles","validCells","gridCenterLat","gridCenterLng","_iterator","_step","_loop","mapBounds","_context4","prevRectangles","rectangle","hasValidLat","isNaN","hasValidLng","warn","Infinity","min","max","_createForOfIteratorHelper","incidentCount","predictedCount","fillColor","strokeColor","centerLat","centerLng","hoverTimeout","isHovered","LatLngBounds","LatLng","Rectangle","fillOpacity","strokeOpacity","strokeWeight","addListener","event","basicContent","locationName","formattedTimestamp","incidentsText","predictedText","getSeverityLevel","severity","content","clearTimeout","setOptions","setContent","setPosition","open","toDate","setTimeout","close","fitBounds","setZoom","getZoom","s","n","done","delegateYield","t1","f","setTitle","MapWrapper","_ref5","Wrapper","render","Status","LOADING","FAILURE","SUCCESS","Maps","gridLoaded","setGridLoaded","isDashboardCollapsed","setIsDashboardCollapsed","timer","margin","overflow","top","right","zIndex","transition","size","textDecoration","reload","ProtectedRoute","Navigate","Signup","App","Routes","Route","path","element","Container","Row","Col","ReactDOM","StrictMode","Router","document","getElementById"],"mappings":"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","file":"static/js/main.c5f49d54.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD1eF7IAs9l-P1UntCR_n7qM8ZeEd6MQlo\",\n  authDomain: \"citypulseapp-5e012.firebaseapp.com\",\n  projectId: \"citypulseapp-5e012\",\n  storageBucket: \"citypulseapp-5e012.firebasestorage.app\",\n  messagingSenderId: \"893499848636\",\n  appId: \"1:893499848636:web:25a7e1ce78470d08915db9\",\n  measurementId: \"G-XRM7CZZHXP\",\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport default app;\n","import {\n  createUserWithEmailAndPassword,\n  GoogleAuthProvider,\n  onAuthStateChanged,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  signOut,\n} from \"firebase/auth\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { auth } from \"../firebase\";\n\nconst userAuthContext = createContext();\n\nexport function UserAuthContextProvider({ children }) {\n  const [user, setUser] = useState({});\n\n  function logIn(email, password) {\n    return signInWithEmailAndPassword(auth, email, password);\n  }\n  function signUp(email, password) {\n    return createUserWithEmailAndPassword(auth, email, password);\n  }\n  function logOut() {\n    return signOut(auth);\n  }\n  function googleSignIn() {\n    const googleAuthProvider = new GoogleAuthProvider();\n    return signInWithPopup(auth, googleAuthProvider);\n  }\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (currentuser) => {\n      console.log(\"Auth\", currentuser);\n      setUser(currentuser);\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <userAuthContext.Provider\n      value={{ user, logIn, signUp, logOut, googleSignIn }}\n    >\n      {children}\n    </userAuthContext.Provider>\n  );\n}\n\nexport function useUserAuth() {\n  return useContext(userAuthContext);\n}\n","import { collection, getDocs } from \"firebase/firestore\";\nimport { useEffect, useState } from \"react\";\nimport { Accordion, Badge, Button, Card, Form, Spinner } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { useUserAuth } from \"../context/UserAuthContext\";\nimport { db } from \"../firebase\";\n\nconst Home = () => {\n  const { logOut, user } = useUserAuth();\n  const navigate = useNavigate();\n  const [userInput, setUserInput] = useState(\"\");\n  const [submittedText, setSubmittedText] = useState(\"\");\n  const [reflexVerdicts, setReflexVerdicts] = useState([]);\n  const [reactVerdicts, setReactVerdicts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [reactLoading, setReactLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [reactError, setReactError] = useState(null);\n\n  const handleLogout = async () => {\n    try {\n      await logOut();\n      navigate(\"/\");\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setSubmittedText(userInput);\n    setUserInput(\"\");\n  };\n\n  // Fetch reflex_verdicts data from Firestore\n  useEffect(() => {\n    const fetchReflexVerdicts = async () => {\n      try {\n        setLoading(true);\n        const querySnapshot = await getDocs(collection(db, \"reflex_verdicts\"));\n        const verdicts = [];\n\n        querySnapshot.forEach((doc) => {\n          verdicts.push({\n            id: doc.id,\n            ...doc.data(),\n          });\n        });\n\n        setReflexVerdicts(verdicts);\n        setError(null);\n      } catch (err) {\n        console.error(\"Error fetching reflex verdicts:\", err);\n        setError(\"Failed to load data from Firestore\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchReflexVerdicts();\n  }, []);\n\n  // Fetch react_verdicts data from Firestore\n  useEffect(() => {\n    const fetchReactVerdicts = async () => {\n      try {\n        setReactLoading(true);\n        const querySnapshot = await getDocs(collection(db, \"react_verdicts\"));\n        const verdicts = [];\n\n        querySnapshot.forEach((doc) => {\n          verdicts.push({\n            id: doc.id,\n            ...doc.data(),\n          });\n        });\n\n        setReactVerdicts(verdicts);\n        setReactError(null);\n      } catch (err) {\n        console.error(\"Error fetching react verdicts:\", err);\n        setReactError(\"Failed to load react verdicts from Firestore\");\n      } finally {\n        setReactLoading(false);\n      }\n    };\n\n    fetchReactVerdicts();\n  }, []);\n\n  // Helper function to format field names\n  const formatFieldName = (fieldName) => {\n    return fieldName\n      .split(\"_\")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(\" \");\n  };\n\n  // Helper function to format field values\n  const formatFieldValue = (value) => {\n    if (value === null || value === undefined) return \"N/A\";\n    if (typeof value === \"boolean\") return value ? \"Yes\" : \"No\";\n    if (typeof value === \"object\" && value.seconds) {\n      // Handle Firestore timestamp\n      return new Date(value.seconds * 1000).toLocaleString();\n    }\n    if (\n      typeof value === \"object\" &&\n      value._lat !== undefined &&\n      value._long !== undefined\n    ) {\n      // Handle Firestore GeoPoint\n      return `${value._lat.toFixed(6)}, ${value._long.toFixed(6)}`;\n    }\n    if (typeof value === \"object\" && !Array.isArray(value)) {\n      // Handle other objects by converting to JSON string\n      return JSON.stringify(value);\n    }\n    if (Array.isArray(value)) return value.join(\", \");\n    return value.toString();\n  };\n\n  // Helper function to get badge variant based on confidence\n  const getConfidenceBadge = (confidence) => {\n    if (confidence >= 0.7) return \"success\";\n    if (confidence >= 0.4) return \"warning\";\n    return \"danger\";\n  };\n\n  // Helper function to get status badge variant\n  const getStatusBadge = (status) => {\n    switch (status?.toLowerCase()) {\n      case \"confirmed\":\n        return \"success\";\n      case \"unconfirmed\":\n        return \"warning\";\n      case \"rejected\":\n        return \"danger\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  // Helper function to safely get nested verdict text\n  const getVerdictText = (verdictObj, fallback = \"No analysis available\") => {\n    if (typeof verdictObj === \"string\") return verdictObj;\n    if (verdictObj && typeof verdictObj === \"object\" && verdictObj.verdict) {\n      return verdictObj.verdict;\n    }\n    return fallback;\n  };\n\n  // Helper function to render Markdown content\n  const renderMarkdown = (markdown) => {\n    if (!markdown || typeof markdown !== \"string\")\n      return \"No content available\";\n\n    // Simple markdown parsing\n    let html = markdown\n      // Headers\n      .replace(/^### (.*$)/gm, '<h6 class=\"text-primary mb-2 mt-3\">$1</h6>')\n      .replace(/^## (.*$)/gm, '<h5 class=\"text-primary mb-2 mt-3\">$1</h5>')\n      .replace(/^# (.*$)/gm, '<h4 class=\"text-primary mb-2 mt-3\">$1</h4>')\n      // Bold text\n      .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\")\n      .replace(/__(.*?)__/g, \"<strong>$1</strong>\")\n      // Italic text\n      .replace(/\\*(.*?)\\*/g, \"<em>$1</em>\")\n      .replace(/_(.*?)_/g, \"<em>$1</em>\")\n      // Code blocks\n      .replace(\n        /```([\\s\\S]*?)```/g,\n        '<pre class=\"bg-light p-2 rounded\"><code>$1</code></pre>'\n      )\n      // Inline code\n      .replace(/`([^`]+)`/g, '<code class=\"bg-light px-1 rounded\">$1</code>')\n      // Lists\n      .replace(/^\\* (.*$)/gm, \"<li>$1</li>\")\n      .replace(/^- (.*$)/gm, \"<li>$1</li>\")\n      .replace(/^\\+ (.*$)/gm, \"<li>$1</li>\")\n      // Line breaks\n      .replace(/\\n\\n/g, '</p><p class=\"mb-2\">')\n      .replace(/\\n/g, \"<br>\");\n\n    // Wrap list items in ul tags\n    html = html.replace(/(<li>.*<\\/li>)/gs, '<ul class=\"mb-2\">$1</ul>');\n\n    // Wrap in paragraph tags if not already wrapped\n    if (!html.startsWith(\"<\")) {\n      html = '<p class=\"mb-2\">' + html + \"</p>\";\n    }\n\n    return html;\n  };\n\n  return (\n    <div className=\"d-flex flex-column min-vh-100\">\n      {/* Full-width Navigation Bar */}\n      <nav\n        className=\"navbar navbar-expand-lg navbar-dark bg-dark shadow-sm\"\n        style={{\n          width: \"100vw\",\n          marginLeft: \"-50vw\",\n          left: \"50%\",\n          position: \"relative\",\n        }}\n      >\n        <div className=\"container-fluid px-4 mx-auto\" style={{ width: \"100%\" }}>\n          <span className=\"navbar-brand fw-bold fs-4\">CityPulse Admin</span>\n\n          <div className=\"d-flex\">\n            <Link to=\"/maps\" className=\"nav-link text-white me-4\">\n              Maps\n            </Link>\n          </div>\n\n          <div className=\"d-flex align-items-center ms-auto\">\n            <span className=\"text-white me-3\">{user && user.email}</span>\n            <Button\n              variant=\"outline-light\"\n              onClick={handleLogout}\n              className=\"rounded-3 px-3\"\n            >\n              Sign Out\n            </Button>\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content Area */}\n      <main className=\"flex-grow-1 bg-light\">\n        <div className=\"container-fluid h-100 p-4\">\n          <div className=\"row h-100 justify-content-center\">\n            <div className=\"col-12\">\n              {/* Display Submitted Text */}\n              {submittedText && (\n                <div className=\"p-3 mb-3 bg-white rounded-3 shadow-sm\">\n                  <p className=\"mb-0\">{submittedText}</p>\n                </div>\n              )}\n\n              {/* Reflex Verdicts Section */}\n              <div className=\"mb-4 w-100\">\n                <h3 className=\"mb-4 text-dark\">Reflex Verdicts</h3>\n\n                {loading && (\n                  <div className=\"text-center py-4\">\n                    <Spinner animation=\"border\" role=\"status\">\n                      <span className=\"visually-hidden\">Loading...</span>\n                    </Spinner>\n                    <p className=\"mt-2 text-muted\">\n                      Loading reflex verdicts...\n                    </p>\n                  </div>\n                )}\n\n                {error && (\n                  <div className=\"alert alert-danger\" role=\"alert\">\n                    {error}\n                  </div>\n                )}\n\n                {!loading && !error && reflexVerdicts.length === 0 && (\n                  <div className=\"alert alert-info\" role=\"alert\">\n                    No reflex verdicts found in the database.\n                  </div>\n                )}\n\n                {!loading && !error && reflexVerdicts.length > 0 && (\n                  <Accordion className=\"w-100\">\n                    {reflexVerdicts.map((verdict, index) => (\n                      <Accordion.Item\n                        eventKey={index.toString()}\n                        key={verdict.id}\n                        className=\"mb-3\"\n                      >\n                        <Accordion.Header className=\"w-100\">\n                          <div className=\"d-flex align-items-center justify-content-between w-100 pe-4\">\n                            <div className=\"d-flex align-items-center flex-grow-1\">\n                              <strong className=\"me-3 fs-5\">\n                                Cell ID: {verdict.cell_id || \"Unknown\"}\n                              </strong>\n                              {verdict.crowd_confidence !== undefined && (\n                                <Badge\n                                  bg={getConfidenceBadge(\n                                    verdict.crowd_confidence\n                                  )}\n                                  className=\"me-3 px-3 py-2\"\n                                  style={{ fontSize: \"0.85rem\" }}\n                                >\n                                  Confidence:{\" \"}\n                                  {(verdict.crowd_confidence * 100).toFixed(1)}%\n                                </Badge>\n                              )}\n                              <Badge bg=\"secondary\" className=\"me-2\">\n                                {verdict.category || \"Unknown Category\"}\n                              </Badge>\n                            </div>\n                            {verdict.location && (\n                              <div\n                                className=\"text-muted text-truncate flex-shrink-1\"\n                                style={{\n                                  maxWidth: \"400px\",\n                                  fontSize: \"0.9rem\",\n                                }}\n                              >\n                                {verdict.location}\n                              </div>\n                            )}\n                          </div>\n                        </Accordion.Header>\n                        <Accordion.Body>\n                          <div className=\"row\">\n                            {/* Basic Information */}\n                            <div className=\"col-md-3 mb-3\">\n                              <Card className=\"h-100\">\n                                <Card.Header className=\"bg-primary text-white\">\n                                  <h6 className=\"mb-0\">Basic Information</h6>\n                                </Card.Header>\n                                <Card.Body>\n                                  <div className=\"row g-2\">\n                                    <div className=\"col-12\">\n                                      <strong>Cell ID:</strong>{\" \"}\n                                      {verdict.cell_id || \"N/A\"}\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>Category:</strong>{\" \"}\n                                      <Badge bg=\"info\" className=\"ms-1\">\n                                        {verdict.category || \"N/A\"}\n                                      </Badge>\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>Coordinates:</strong>{\" \"}\n                                      {formatFieldValue(verdict.coordinates)}\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>Confidence:</strong>\n                                      <Badge\n                                        bg={getConfidenceBadge(\n                                          verdict.crowd_confidence\n                                        )}\n                                        className=\"ms-2\"\n                                      >\n                                        {verdict.crowd_confidence !== undefined\n                                          ? (\n                                              verdict.crowd_confidence * 100\n                                            ).toFixed(1) + \"%\"\n                                          : \"N/A\"}\n                                      </Badge>\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>Processed At:</strong>{\" \"}\n                                      <small className=\"text-muted\">\n                                        {formatFieldValue(verdict.processed_at)}\n                                      </small>\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>Timestamp:</strong>{\" \"}\n                                      <small className=\"text-muted\">\n                                        {formatFieldValue(verdict.timestamp)}\n                                      </small>\n                                    </div>\n                                  </div>\n                                </Card.Body>\n                              </Card>\n                            </div>\n\n                            {/* Location Information */}\n                            <div className=\"col-md-5 mb-3\">\n                              <Card className=\"h-100\">\n                                <Card.Header className=\"bg-success text-white\">\n                                  <h6 className=\"mb-0\">Location Details</h6>\n                                </Card.Header>\n                                <Card.Body>\n                                  <p className=\"mb-0 small\">\n                                    {verdict.location ||\n                                      \"Location not available\"}\n                                  </p>\n                                </Card.Body>\n                              </Card>\n                            </div>\n\n                            {/* Sources Summary */}\n                            <div className=\"col-md-4 mb-3\">\n                              <Card className=\"h-100\">\n                                <Card.Header className=\"bg-info text-white\">\n                                  <h6 className=\"mb-0\">Sources Summary</h6>\n                                </Card.Header>\n                                <Card.Body>\n                                  <div className=\"row g-2\">\n                                    <div className=\"col-12\">\n                                      <strong>News Count:</strong>{\" \"}\n                                      <Badge bg=\"primary\">\n                                        {verdict.sources?.news_count || 0}\n                                      </Badge>\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>Social Media Count:</strong>{\" \"}\n                                      <Badge bg=\"primary\">\n                                        {verdict.sources?.social_media_count ||\n                                          0}\n                                      </Badge>\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>Weather Alert Count:</strong>{\" \"}\n                                      <Badge bg=\"primary\">\n                                        {verdict.sources?.weather_alert_count ||\n                                          0}\n                                      </Badge>\n                                    </div>\n                                  </div>\n                                </Card.Body>\n                              </Card>\n                            </div>\n\n                            {/* AI Verdicts Section */}\n                            {verdict.verdicts && (\n                              <div className=\"col-12 mb-3\">\n                                <Card>\n                                  <Card.Header className=\"bg-dark text-white\">\n                                    <h6 className=\"mb-0\">\n                                      🤖 AI Analysis Verdicts\n                                    </h6>\n                                  </Card.Header>\n                                  <Card.Body>\n                                    <div className=\"row g-3\">\n                                      {/* Image Analysis */}\n                                      <div className=\"col-md-12 mb-3\">\n                                        <div className=\"border-start border-primary border-4 ps-3\">\n                                          <h6 className=\"text-primary mb-2\">\n                                            📸 Image Analysis\n                                          </h6>\n                                          <p className=\"mb-0 small\">\n                                            {getVerdictText(\n                                              verdict.verdicts.image,\n                                              \"No image analysis available\"\n                                            )}\n                                          </p>\n                                        </div>\n                                      </div>\n\n                                      {/* News Analysis */}\n                                      <div className=\"col-md-4\">\n                                        <div className=\"border-start border-warning border-4 ps-3\">\n                                          <h6 className=\"text-warning mb-2\">\n                                            📰 News Analysis\n                                          </h6>\n                                          {verdict.verdicts.news &&\n                                            verdict.verdicts.news.articles && (\n                                              <>\n                                                <strong className=\"small\">\n                                                  Articles Verdict:\n                                                </strong>\n                                                <p className=\"small mb-2 text-muted\">\n                                                  {getVerdictText(\n                                                    verdict.verdicts.news\n                                                      .articles,\n                                                    \"No verdict available\"\n                                                  )}\n                                                </p>\n                                              </>\n                                            )}\n                                          <strong className=\"small\">\n                                            Overall:\n                                          </strong>\n                                          <p className=\"small mb-0\">\n                                            {getVerdictText(\n                                              verdict.verdicts.news,\n                                              \"No news analysis available\"\n                                            )}\n                                          </p>\n                                        </div>\n                                      </div>\n\n                                      {/* Social Media Analysis */}\n                                      <div className=\"col-md-4\">\n                                        <div className=\"border-start border-danger border-4 ps-3\">\n                                          <h6 className=\"text-danger mb-2\">\n                                            📱 Social Media Analysis\n                                          </h6>\n                                          {verdict.verdicts.social_media &&\n                                            verdict.verdicts.social_media\n                                              .social_media_posts && (\n                                              <>\n                                                <strong className=\"small\">\n                                                  Posts Verdict:\n                                                </strong>\n                                                <p className=\"small mb-2 text-muted\">\n                                                  {getVerdictText(\n                                                    verdict.verdicts\n                                                      .social_media\n                                                      .social_media_posts,\n                                                    \"No verdict available\"\n                                                  )}\n                                                </p>\n                                              </>\n                                            )}\n                                          <strong className=\"small\">\n                                            Overall:\n                                          </strong>\n                                          <p className=\"small mb-0\">\n                                            {getVerdictText(\n                                              verdict.verdicts.social_media,\n                                              \"No social media analysis available\"\n                                            )}\n                                          </p>\n                                        </div>\n                                      </div>\n\n                                      {/* Weather Analysis */}\n                                      <div className=\"col-md-4\">\n                                        <div className=\"border-start border-info border-4 ps-3\">\n                                          <h6 className=\"text-info mb-2\">\n                                            🌤️ Weather Analysis\n                                          </h6>\n                                          {verdict.verdicts.weather_alerts &&\n                                            verdict.verdicts.weather_alerts\n                                              .alerts && (\n                                              <>\n                                                <strong className=\"small\">\n                                                  Alerts Verdict:\n                                                </strong>\n                                                <p className=\"small mb-2 text-muted\">\n                                                  {getVerdictText(\n                                                    verdict.verdicts\n                                                      .weather_alerts.alerts,\n                                                    \"No verdict available\"\n                                                  )}\n                                                </p>\n                                              </>\n                                            )}\n                                          <strong className=\"small\">\n                                            Overall:\n                                          </strong>\n                                          <p className=\"small mb-0\">\n                                            {getVerdictText(\n                                              verdict.verdicts.weather_alerts,\n                                              \"No weather analysis available\"\n                                            )}\n                                          </p>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </Card.Body>\n                                </Card>\n                              </div>\n                            )}\n\n                            {/* Data Sources Details */}\n                            <div className=\"col-12 mb-3\">\n                              <Accordion>\n                                <Accordion.Item eventKey=\"0\">\n                                  <Accordion.Header>\n                                    <strong>📊 Detailed Source Analysis</strong>\n                                  </Accordion.Header>\n                                  <Accordion.Body>\n                                    <div className=\"row g-3\">\n                                      {/* News Details */}\n                                      {verdict.news && (\n                                        <div className=\"col-md-4\">\n                                          <Card className=\"h-100\">\n                                            <Card.Header className=\"bg-warning text-dark\">\n                                              <h6 className=\"mb-0\">\n                                                📰 News Details\n                                              </h6>\n                                            </Card.Header>\n                                            <Card.Body>\n                                              {verdict.news.articles && (\n                                                <div>\n                                                  <strong>\n                                                    Articles Verdict:\n                                                  </strong>\n                                                  <p className=\"small mb-0 text-muted\">\n                                                    {getVerdictText(\n                                                      verdict.news.articles,\n                                                      \"No verdict available\"\n                                                    )}\n                                                  </p>\n                                                </div>\n                                              )}\n                                            </Card.Body>\n                                          </Card>\n                                        </div>\n                                      )}\n\n                                      {/* Social Media Details */}\n                                      {verdict.social_media && (\n                                        <div className=\"col-md-4\">\n                                          <Card className=\"h-100\">\n                                            <Card.Header className=\"bg-danger text-white\">\n                                              <h6 className=\"mb-0\">\n                                                📱 Social Media Details\n                                              </h6>\n                                            </Card.Header>\n                                            <Card.Body>\n                                              {verdict.social_media\n                                                .social_media_posts && (\n                                                <div>\n                                                  <strong>\n                                                    Posts Verdict:\n                                                  </strong>\n                                                  <p className=\"small mb-0 text-muted\">\n                                                    {getVerdictText(\n                                                      verdict.social_media\n                                                        .social_media_posts,\n                                                      \"No verdict available\"\n                                                    )}\n                                                  </p>\n                                                </div>\n                                              )}\n                                            </Card.Body>\n                                          </Card>\n                                        </div>\n                                      )}\n\n                                      {/* Weather Details */}\n                                      {verdict.weather_alerts && (\n                                        <div className=\"col-md-4\">\n                                          <Card className=\"h-100\">\n                                            <Card.Header className=\"bg-info text-white\">\n                                              <h6 className=\"mb-0\">\n                                                🌤️ Weather Details\n                                              </h6>\n                                            </Card.Header>\n                                            <Card.Body>\n                                              {verdict.weather_alerts\n                                                .alerts && (\n                                                <div>\n                                                  <strong>\n                                                    Alerts Verdict:\n                                                  </strong>\n                                                  <p className=\"small mb-0 text-muted\">\n                                                    {getVerdictText(\n                                                      verdict.weather_alerts\n                                                        .alerts,\n                                                      \"No verdict available\"\n                                                    )}\n                                                  </p>\n                                                </div>\n                                              )}\n                                            </Card.Body>\n                                          </Card>\n                                        </div>\n                                      )}\n                                    </div>\n                                  </Accordion.Body>\n                                </Accordion.Item>\n                              </Accordion>\n                            </div>\n                          </div>\n\n                          {/* Additional Fields */}\n                          {Object.keys(verdict).filter(\n                            (key) =>\n                              ![\n                                \"id\",\n                                \"cell_id\",\n                                \"category\",\n                                \"coordinates\",\n                                \"crowd_confidence\",\n                                \"location\",\n                                \"processed_at\",\n                                \"timestamp\",\n                                \"sources\",\n                                \"verdicts\",\n                                \"news\",\n                                \"social_media\",\n                                \"weather_alerts\",\n                              ].includes(key)\n                          ).length > 0 && (\n                            <Card className=\"mt-3\">\n                              <Card.Header className=\"bg-light text-dark\">\n                                <h6 className=\"mb-0\">Additional Information</h6>\n                              </Card.Header>\n                              <Card.Body>\n                                <div className=\"row g-2\">\n                                  {Object.entries(verdict)\n                                    .filter(\n                                      ([key]) =>\n                                        ![\n                                          \"id\",\n                                          \"cell_id\",\n                                          \"category\",\n                                          \"coordinates\",\n                                          \"crowd_confidence\",\n                                          \"location\",\n                                          \"processed_at\",\n                                          \"timestamp\",\n                                          \"sources\",\n                                          \"verdicts\",\n                                          \"news\",\n                                          \"social_media\",\n                                          \"weather_alerts\",\n                                        ].includes(key)\n                                    )\n                                    .map(([key, value]) => (\n                                      <div key={key} className=\"col-md-6\">\n                                        <strong>{formatFieldName(key)}:</strong>{\" \"}\n                                        {formatFieldValue(value)}\n                                      </div>\n                                    ))}\n                                </div>\n                              </Card.Body>\n                            </Card>\n                          )}\n                        </Accordion.Body>\n                      </Accordion.Item>\n                    ))}\n                  </Accordion>\n                )}\n              </div>\n\n              {/* React Verdicts Section */}\n              <div className=\"mb-4 w-100\">\n                <h3 className=\"mb-4 text-dark\">React Verdicts</h3>\n\n                {reactLoading && (\n                  <div className=\"text-center py-4\">\n                    <Spinner animation=\"border\" role=\"status\">\n                      <span className=\"visually-hidden\">Loading...</span>\n                    </Spinner>\n                    <p className=\"mt-2 text-muted\">Loading react verdicts...</p>\n                  </div>\n                )}\n\n                {reactError && (\n                  <div className=\"alert alert-danger\" role=\"alert\">\n                    {reactError}\n                  </div>\n                )}\n\n                {!reactLoading && !reactError && reactVerdicts.length === 0 && (\n                  <div className=\"alert alert-info\" role=\"alert\">\n                    No react verdicts found in the database.\n                  </div>\n                )}\n\n                {!reactLoading && !reactError && reactVerdicts.length > 0 && (\n                  <Accordion className=\"w-100\">\n                    {reactVerdicts.map((verdict, index) => (\n                      <Accordion.Item\n                        eventKey={`react-${index.toString()}`}\n                        key={verdict.id}\n                        className=\"mb-3\"\n                      >\n                        <Accordion.Header className=\"w-100\">\n                          <div className=\"d-flex align-items-center justify-content-between w-100 pe-4\">\n                            <div className=\"d-flex align-items-center flex-grow-1\">\n                              <strong className=\"me-3 fs-5\">\n                                Cell ID: {verdict.cell_id || \"Unknown\"}\n                              </strong>\n                              {verdict.confidence !== undefined && (\n                                <Badge\n                                  bg={getConfidenceBadge(verdict.confidence)}\n                                  className=\"me-3 px-3 py-2\"\n                                  style={{ fontSize: \"0.85rem\" }}\n                                >\n                                  Confidence:{\" \"}\n                                  {(verdict.confidence * 100).toFixed(1)}%\n                                </Badge>\n                              )}\n                              <Badge bg=\"secondary\" className=\"me-2\">\n                                {verdict.category || \"Unknown Category\"}\n                              </Badge>\n                              <Badge\n                                bg={getStatusBadge(verdict.status)}\n                                className=\"me-2\"\n                              >\n                                {verdict.status || \"Unknown Status\"}\n                              </Badge>\n                            </div>\n                            <div\n                              className=\"text-muted text-truncate flex-shrink-1\"\n                              style={{\n                                maxWidth: \"300px\",\n                                fontSize: \"0.9rem\",\n                              }}\n                            >\n                              {verdict.final_verdict || \"No verdict\"}\n                            </div>\n                          </div>\n                        </Accordion.Header>\n                        <Accordion.Body>\n                          <div className=\"row\">\n                            {/* Basic Information */}\n                            <div className=\"col-md-4 mb-3\">\n                              <Card className=\"h-100\">\n                                <Card.Header className=\"bg-primary text-white\">\n                                  <h6 className=\"mb-0\">Basic Information</h6>\n                                </Card.Header>\n                                <Card.Body>\n                                  <div className=\"row g-2\">\n                                    <div className=\"col-12\">\n                                      <strong>Cell ID:</strong>{\" \"}\n                                      {verdict.cell_id || \"N/A\"}\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>Category:</strong>{\" \"}\n                                      <Badge bg=\"info\" className=\"ms-1\">\n                                        {verdict.category || \"N/A\"}\n                                      </Badge>\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>Status:</strong>{\" \"}\n                                      <Badge\n                                        bg={getStatusBadge(verdict.status)}\n                                        className=\"ms-1\"\n                                      >\n                                        {verdict.status || \"N/A\"}\n                                      </Badge>\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>Confidence:</strong>\n                                      <Badge\n                                        bg={getConfidenceBadge(\n                                          verdict.confidence\n                                        )}\n                                        className=\"ms-2\"\n                                      >\n                                        {verdict.confidence !== undefined\n                                          ? (verdict.confidence * 100).toFixed(\n                                              1\n                                            ) + \"%\"\n                                          : \"N/A\"}\n                                      </Badge>\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>Processing Time:</strong>{\" \"}\n                                      <small className=\"text-muted\">\n                                        {verdict.processing_time_sec\n                                          ? `${verdict.processing_time_sec.toFixed(\n                                              2\n                                            )}s`\n                                          : \"N/A\"}\n                                      </small>\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>Start Time:</strong>{\" \"}\n                                      <small className=\"text-muted\">\n                                        {formatFieldValue(verdict.start_time)}\n                                      </small>\n                                    </div>\n                                    <div className=\"col-12\">\n                                      <strong>End Time:</strong>{\" \"}\n                                      <small className=\"text-muted\">\n                                        {formatFieldValue(verdict.end_time)}\n                                      </small>\n                                    </div>\n                                  </div>\n                                </Card.Body>\n                              </Card>\n                            </div>\n\n                            {/* Final Verdict */}\n                            <div className=\"col-md-8 mb-3\">\n                              <Card className=\"h-100\">\n                                <Card.Header className=\"bg-success text-white\">\n                                  <h6 className=\"mb-0\">Final Verdict</h6>\n                                </Card.Header>\n                                <Card.Body>\n                                  <p className=\"mb-0 small\">\n                                    {verdict.final_verdict ||\n                                      \"No final verdict available\"}\n                                  </p>\n                                </Card.Body>\n                              </Card>\n                            </div>\n\n                            {/* Analysis */}\n                            {verdict.analysis && (\n                              <div className=\"col-12 mb-3\">\n                                <Card>\n                                  <Card.Header className=\"bg-dark text-white\">\n                                    <h6 className=\"mb-0\">\n                                      🔍 Detailed Analysis\n                                    </h6>\n                                  </Card.Header>\n                                  <Card.Body>\n                                    <div\n                                      className=\"analysis-content small\"\n                                      dangerouslySetInnerHTML={{\n                                        __html: renderMarkdown(\n                                          verdict.analysis\n                                        ),\n                                      }}\n                                      style={{\n                                        lineHeight: \"1.5\",\n                                        fontSize: \"0.9rem\",\n                                      }}\n                                    />\n                                  </Card.Body>\n                                </Card>\n                              </div>\n                            )}\n\n                            {/* Thought Process */}\n                            {verdict.thought_process &&\n                              verdict.thought_process.length > 0 && (\n                                <div className=\"col-12 mb-3\">\n                                  <Card>\n                                    <Card.Header className=\"bg-info text-white\">\n                                      <h6 className=\"mb-0\">\n                                        🧠 Thought Process\n                                      </h6>\n                                    </Card.Header>\n                                    <Card.Body>\n                                      <div className=\"timeline\">\n                                        {verdict.thought_process.map(\n                                          (thought, idx) => (\n                                            <div\n                                              key={idx}\n                                              className=\"mb-3 pb-3 border-bottom border-light\"\n                                            >\n                                              <div className=\"d-flex justify-content-between align-items-start\">\n                                                <div className=\"flex-grow-1\">\n                                                  <Badge\n                                                    bg=\"secondary\"\n                                                    className=\"mb-2\"\n                                                  >\n                                                    Step {idx + 1}\n                                                  </Badge>\n                                                  <p className=\"mb-1 small\">\n                                                    {thought.thought}\n                                                  </p>\n                                                </div>\n                                                <small className=\"text-muted ms-3\">\n                                                  {formatFieldValue(\n                                                    thought.timestamp\n                                                  )}\n                                                </small>\n                                              </div>\n                                            </div>\n                                          )\n                                        )}\n                                      </div>\n                                    </Card.Body>\n                                  </Card>\n                                </div>\n                              )}\n\n                            {/* Actions */}\n                            {verdict.actions && verdict.actions.length > 0 && (\n                              <div className=\"col-12 mb-3\">\n                                <Card>\n                                  <Card.Header className=\"bg-warning text-dark\">\n                                    <h6 className=\"mb-0\">⚡ Actions Taken</h6>\n                                  </Card.Header>\n                                  <Card.Body>\n                                    <div className=\"row g-3\">\n                                      {verdict.actions.map((action, idx) => (\n                                        <div key={idx} className=\"col-md-6\">\n                                          <Card className=\"h-100 border-start border-warning border-4\">\n                                            <Card.Body className=\"p-3\">\n                                              <div className=\"d-flex justify-content-between align-items-start mb-2\">\n                                                <Badge\n                                                  bg=\"warning\"\n                                                  text=\"dark\"\n                                                  className=\"mb-2\"\n                                                >\n                                                  Action {idx + 1}\n                                                </Badge>\n                                                <small className=\"text-muted\">\n                                                  {formatFieldValue(\n                                                    action.timestamp\n                                                  )}\n                                                </small>\n                                              </div>\n                                              <h6 className=\"small mb-2\">\n                                                {action.action}\n                                              </h6>\n                                              <div className=\"mb-2\">\n                                                <strong className=\"small\">\n                                                  Action Needed:\n                                                </strong>{\" \"}\n                                                <Badge\n                                                  bg={\n                                                    action.action_needed\n                                                      ? \"success\"\n                                                      : \"secondary\"\n                                                  }\n                                                >\n                                                  {action.action_needed\n                                                    ? \"Yes\"\n                                                    : \"No\"}\n                                                </Badge>\n                                              </div>\n                                              <div className=\"mb-2\">\n                                                <strong className=\"small\">\n                                                  Executed:\n                                                </strong>{\" \"}\n                                                <Badge\n                                                  bg={\n                                                    action.executed\n                                                      ? \"success\"\n                                                      : \"danger\"\n                                                  }\n                                                >\n                                                  {action.executed\n                                                    ? \"Yes\"\n                                                    : \"No\"}\n                                                </Badge>\n                                              </div>\n                                              {action.result && (\n                                                <div>\n                                                  <strong className=\"small\">\n                                                    Result:\n                                                  </strong>\n                                                  <p className=\"small mb-0 text-muted mt-1\">\n                                                    {action.result}\n                                                  </p>\n                                                </div>\n                                              )}\n                                            </Card.Body>\n                                          </Card>\n                                        </div>\n                                      ))}\n                                    </div>\n                                  </Card.Body>\n                                </Card>\n                              </div>\n                            )}\n\n                            {/* Additional Fields */}\n                            {Object.keys(verdict).filter(\n                              (key) =>\n                                ![\n                                  \"id\",\n                                  \"cell_id\",\n                                  \"category\",\n                                  \"confidence\",\n                                  \"final_verdict\",\n                                  \"status\",\n                                  \"analysis\",\n                                  \"thought_process\",\n                                  \"actions\",\n                                  \"processing_time_sec\",\n                                  \"start_time\",\n                                  \"end_time\",\n                                  \"reflex_verdict_id\",\n                                ].includes(key)\n                            ).length > 0 && (\n                              <Card className=\"mt-3\">\n                                <Card.Header className=\"bg-light text-dark\">\n                                  <h6 className=\"mb-0\">\n                                    Additional Information\n                                  </h6>\n                                </Card.Header>\n                                <Card.Body>\n                                  <div className=\"row g-2\">\n                                    {Object.entries(verdict)\n                                      .filter(\n                                        ([key]) =>\n                                          ![\n                                            \"id\",\n                                            \"cell_id\",\n                                            \"category\",\n                                            \"confidence\",\n                                            \"final_verdict\",\n                                            \"status\",\n                                            \"analysis\",\n                                            \"thought_process\",\n                                            \"actions\",\n                                            \"processing_time_sec\",\n                                            \"start_time\",\n                                            \"end_time\",\n                                            \"reflex_verdict_id\",\n                                          ].includes(key)\n                                      )\n                                      .map(([key, value]) => (\n                                        <div key={key} className=\"col-md-6\">\n                                          <strong>\n                                            {formatFieldName(key)}:\n                                          </strong>{\" \"}\n                                          {formatFieldValue(value)}\n                                        </div>\n                                      ))}\n                                  </div>\n                                </Card.Body>\n                              </Card>\n                            )}\n                          </div>\n                        </Accordion.Body>\n                      </Accordion.Item>\n                    ))}\n                  </Accordion>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Compact Dialog Box */}\n      <div\n        className=\"bg-dark text-white py-2 px-3\"\n        style={{\n          width: \"100vw\",\n          marginLeft: \"-50vw\",\n          left: \"50%\",\n          position: \"relative\",\n          borderTop: \"1px solid rgba(255,255,255,0.1)\",\n        }}\n      >\n        <Form onSubmit={handleSubmit} className=\"d-flex gap-2\">\n          <Form.Control\n            as=\"textarea\"\n            rows={1}\n            placeholder=\"Write your message here...\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            className=\"flex-grow-1 border-0 shadow-sm\"\n            style={{\n              borderRadius: \"20px\",\n              minHeight: \"40px\",\n              resize: \"none\",\n              padding: \"8px 16px\",\n            }}\n          />\n          <Button\n            variant=\"light\"\n            type=\"submit\"\n            className=\"rounded-pill px-3\"\n            style={{\n              height: \"40px\",\n              whiteSpace: \"nowrap\",\n            }}\n          >\n            Post\n          </Button>\n        </Form>\n      </div>\n\n      {/* Footer */}\n      <footer\n        className=\"bg-dark text-white py-2\"\n        style={{\n          width: \"100vw\",\n          marginLeft: \"-50vw\",\n          left: \"50%\",\n          position: \"relative\",\n        }}\n      >\n        <div className=\"container-fluid px-4 text-center\">\n          <div className=\"text-white small\" style={{ fontSize: \"0.7rem\" }}>\n            © {new Date().getFullYear()} CityPulse Admin. All rights reserved.\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default Home;\n","import { useState } from \"react\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport GoogleButton from \"react-google-button\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useUserAuth } from \"../context/UserAuthContext\";\n\nconst Login = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const { logIn, googleSignIn } = useUserAuth();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    try {\n      await logIn(email, password);\n      navigate(\"/home\");\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const handleGoogleSignIn = async (e) => {\n    e.preventDefault();\n    try {\n      await googleSignIn();\n      navigate(\"/home\");\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return (\n    <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center bg-light\">\n      <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\n        <div className=\"p-5 bg-white rounded-3 shadow-sm\">\n          <div className=\"text-center mb-4\">\n            <h2 className=\"fw-bold mb-1\" style={{ color: \"#212529\" }}>\n              CityPulse Admin\n            </h2>\n            <p className=\"text-muted\">Sign in to your admin dashboard</p>\n          </div>\n\n          {error && (\n            <Alert variant=\"danger\" className=\"rounded-2\">\n              {error}\n            </Alert>\n          )}\n\n          <Form onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Email address\"\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"py-2 border-2\"\n                style={{ borderColor: \"#dee2e6\", borderRadius: \"8px\" }}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-4\" controlId=\"formBasicPassword\">\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"py-2 border-2\"\n                style={{ borderColor: \"#dee2e6\", borderRadius: \"8px\" }}\n              />\n            </Form.Group>\n\n            <Button\n              variant=\"dark\"\n              type=\"submit\"\n              className=\"w-100 py-2 mb-3 rounded-3 fw-bold\"\n              style={{ backgroundColor: \"#212529\", border: \"none\" }}\n            >\n              Log In\n            </Button>\n          </Form>\n\n          <div className=\"d-flex align-items-center mb-3\">\n            <div\n              className=\"flex-grow-1 border-top\"\n              style={{ borderColor: \"#dee2e6\" }}\n            ></div>\n            <div className=\"px-3 text-muted\">or</div>\n            <div\n              className=\"flex-grow-1 border-top\"\n              style={{ borderColor: \"#dee2e6\" }}\n            ></div>\n          </div>\n\n          <div className=\"d-flex justify-content-center mb-4\">\n            <GoogleButton\n              onClick={handleGoogleSignIn}\n              style={{\n                borderRadius: \"8px\",\n                boxShadow: \"none\",\n                border: \"1px solid #dee2e6\",\n              }}\n            />\n          </div>\n\n          <div className=\"text-center text-muted\">\n            Don't have an account?{\" \"}\n            <Link\n              to=\"/signup\"\n              className=\"text-decoration-none fw-bold\"\n              style={{ color: \"#212529\" }}\n            >\n              Sign up\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import { db } from '../firebase';\nimport { collection, getDocs } from 'firebase/firestore';\n\n// Service to fetch cell data from Firestore\nexport const fetchCellData = async () => {\n  try {\n    const cellDataCollection = collection(db, 'CellData');\n    const cellDataSnapshot = await getDocs(cellDataCollection);\n    const cellDataList = cellDataSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    console.log('Fetched cell data:', cellDataList);\n    return cellDataList;\n  } catch (error) {\n    console.error('Error fetching cell data:', error);\n    throw error;\n  }\n};\n\n// Service to get location name using reverse geocoding\nexport const getLocationName = async (lat, lng) => {\n  try {\n    const geocoder = new window.google.maps.Geocoder();\n    \n    return new Promise((resolve, reject) => {\n      geocoder.geocode(\n        { location: { lat, lng } },\n        (results, status) => {\n          if (status === 'OK') {\n            if (results[0]) {\n              // Get the formatted address or area name\n              const address = results[0].formatted_address;\n              // Try to get a more specific area name\n              const addressComponents = results[0].address_components;\n              const locality = addressComponents.find(\n                component => component.types.includes('locality') || \n                            component.types.includes('sublocality')\n              );\n              \n              resolve(locality ? locality.long_name : address);\n            } else {\n              resolve('Unknown Location');\n            }\n          } else {\n            console.error('Geocoder failed due to: ' + status);\n            resolve('Unknown Location');\n          }\n        }\n      );\n    });\n  } catch (error) {\n    console.error('Error in reverse geocoding:', error);\n    return 'Unknown Location';\n  }\n};\n\n// Utility function to create rectangle bounds for grid cells\nexport const createCellBounds = (minLat, minLon, maxLat, maxLon) => {\n  return new window.google.maps.LatLngBounds(\n    new window.google.maps.LatLng(minLat, minLon),\n    new window.google.maps.LatLng(maxLat, maxLon)\n  );\n};\n","import { Status, Wrapper } from \"@googlemaps/react-wrapper\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { fetchCellData, getLocationName } from \"../services/cellDataService\";\nimport \"./MapComponent.css\";\n\n// Get API key from environment variables or use default\nconst GOOGLE_MAPS_API_KEY = \"AIzaSyCW8Rou5OD4f9imd9KRI0x_Y3xrZ0S98qk\";\n\nconst MapComponent = ({ center, zoom, style }) => {\n  const ref = useRef(null);\n  const [map, setMap] = useState(null);\n  const [rectangles, setRectangles] = useState([]);\n  const [infoWindow, setInfoWindow] = useState(null);\n  const [cellData, setCellData] = useState([]);\n  const [homeMarker, setHomeMarker] = useState(null);\n  const [gridStats, setGridStats] = useState({ total: 0, withIncidents: 0, withPredictions: 0 });\n\n  // Fetch cell data from Firestore\n  useEffect(() => {\n    const loadCellData = async () => {\n      try {\n        const data = await fetchCellData();\n        console.log(\"Loaded cell data:\", data);\n        console.log(\"Total cells loaded:\", data?.length || 0);\n\n        // Debug: Check the structure of the first few cells\n        if (data && data.length > 0) {\n          console.log(\"Sample cell data structures:\");\n          data.slice(0, 3).forEach((cell, index) => {\n            console.log(`Cell ${index + 1}:`, {\n              id: cell.id,\n              coordinates: {\n                min_lat: cell.min_lat,\n                max_lat: cell.max_lat,\n                min_lon: cell.min_lon,\n                max_lon: cell.max_lon,\n                min_lng: cell.min_lng,\n                max_lng: cell.max_lng,\n              },\n              incidents: cell.incidents,\n              predicted: cell.predicted,\n              hasValidCoords: !!(\n                cell.min_lat &&\n                cell.max_lat &&\n                (cell.min_lon || cell.min_lng) &&\n                (cell.max_lon || cell.max_lng)\n              ),\n            });\n          });\n\n          setCellData(data);\n\n          // Update grid statistics\n          const totalCells = data.length;\n          const cellsWithIncidents = data.filter(\n            (cell) => Array.isArray(cell.incidents) && cell.incidents.length > 0\n          ).length;\n          const cellsWithPredictions = data.filter(\n            (cell) => Array.isArray(cell.predicted) && cell.predicted.length > 0\n          ).length;\n\n          console.log(\n            `Grid Statistics: ${totalCells} total cells, ${cellsWithIncidents} with incidents, ${cellsWithPredictions} with predictions`\n          );\n          setGridStats({\n            total: totalCells,\n            withIncidents: cellsWithIncidents,\n            withPredictions: cellsWithPredictions,\n          });\n        } else {\n          console.log(\"No cell data found in Firestore, creating test grid\");\n          createTestGrid();\n        }\n      } catch (error) {\n        console.error(\"Failed to load cell data:\", error);\n        console.log(\"Creating test grid due to error\");\n        createTestGrid();\n      }\n    };\n\n    if (map) {\n      loadCellData();\n    }\n  }, [map]);\n\n  // Create test grid if no Firestore data\n  const createTestGrid = () => {\n    const testCells = [];\n\n    // Get current map bounds to cover entire visible area\n    const bounds = map ? map.getBounds() : null;\n\n    let minLat, maxLat, minLng, maxLng;\n\n    if (bounds) {\n      // Use actual map bounds\n      minLat = bounds.getSouthWest().lat();\n      maxLat = bounds.getNorthEast().lat();\n      minLng = bounds.getSouthWest().lng();\n      maxLng = bounds.getNorthEast().lng();\n    } else {\n      // Fallback to a large area around Bangalore\n      minLat = 12.8;\n      maxLat = 13.1;\n      minLng = 77.4;\n      maxLng = 77.8;\n    }\n\n    // Calculate grid size based on visible area\n    const latRange = maxLat - minLat;\n    const lngRange = maxLng - minLng;\n    const gridCount = 20; // 20x20 grid for better coverage\n    const latStep = latRange / gridCount;\n    const lngStep = lngRange / gridCount;\n\n    console.log(\n      `Creating grid covering area: ${minLat.toFixed(4)}, ${minLng.toFixed(\n        4\n      )} to ${maxLat.toFixed(4)}, ${maxLng.toFixed(4)}`\n    );\n\n    for (let i = 0; i < gridCount; i++) {\n      for (let j = 0; j < gridCount; j++) {\n        const cellMinLat = minLat + i * latStep;\n        const cellMaxLat = cellMinLat + latStep;\n        const cellMinLng = minLng + j * lngStep;\n        const cellMaxLng = cellMinLng + lngStep;\n\n        testCells.push({\n          id: `grid_cell_${i}_${j}`,\n          min_lat: cellMinLat,\n          max_lat: cellMaxLat,\n          min_lon: cellMinLng,\n          max_lon: cellMaxLng,\n          incidents:\n            Math.random() > 0.8\n              ? [`Incident ${Math.floor(Math.random() * 3) + 1}`]\n              : [],\n          timestamp: new Date(),\n        });\n      }\n    }\n\n    console.log(\"Created full map grid with\", testCells.length, \"cells\");\n    setCellData(testCells);\n    setGridStats({\n      total: testCells.length,\n      withIncidents: testCells.filter((c) => c.incidents.length > 0).length,\n      withPredictions: 0, // Test grid doesn't have predictions\n    });\n  };\n\n  // Initialize map\n  useEffect(() => {\n    if (ref.current && !map) {\n      const mapInstance = new window.google.maps.Map(ref.current, {\n        center: center || { lat: 12.95, lng: 77.635 },\n        zoom: zoom || 12, // Lower zoom to see more area\n        mapTypeControl: true,\n        streetViewControl: true,\n        fullscreenControl: true,\n        mapTypeId: \"roadmap\",\n      });\n      setMap(mapInstance);\n\n      // Initialize InfoWindow\n      const infoWindowInstance = new window.google.maps.InfoWindow();\n      setInfoWindow(infoWindowInstance);\n\n      // Add home marker at center\n      const marker = new window.google.maps.Marker({\n        position: center || { lat: 12.95, lng: 77.635 },\n        map: mapInstance,\n        title: \"Home/Center Point\",\n        icon: {\n          url: \"https://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n          scaledSize: new window.google.maps.Size(40, 40),\n        },\n      });\n      setHomeMarker(marker);\n    }\n  }, [ref, map, center, zoom]);\n\n  const createGridRectangles = React.useCallback(async () => {\n    if (!map || cellData.length === 0) return;\n\n    // Clear existing rectangles - use a ref to avoid dependency issues\n    setRectangles((prevRectangles) => {\n      prevRectangles.forEach((rectangle) => rectangle.setMap(null));\n      return [];\n    });\n\n    const newRectangles = [];\n    console.log(`Creating rectangles for ${cellData.length} cells`);\n\n    // Filter cells with valid coordinates first\n    const validCells = cellData.filter((cell) => {\n      const hasValidLat =\n        typeof cell.min_lat === \"number\" &&\n        typeof cell.max_lat === \"number\" &&\n        !isNaN(cell.min_lat) &&\n        !isNaN(cell.max_lat);\n      const hasValidLng =\n        (typeof cell.min_lon === \"number\" &&\n          typeof cell.max_lon === \"number\" &&\n          !isNaN(cell.min_lon) &&\n          !isNaN(cell.max_lon)) ||\n        (typeof cell.min_lng === \"number\" &&\n          typeof cell.max_lng === \"number\" &&\n          !isNaN(cell.min_lng) &&\n          !isNaN(cell.max_lng));\n      return hasValidLat && hasValidLng;\n    });\n\n    console.log(\n      `Found ${validCells.length} cells with valid coordinates out of ${cellData.length} total`\n    );\n\n    if (validCells.length === 0) {\n      console.warn(\"No cells with valid coordinates found\");\n      return;\n    }\n\n    // Calculate bounds of valid cell data only\n    let minLat = Infinity,\n      maxLat = -Infinity;\n    let minLng = Infinity,\n      maxLng = -Infinity;\n\n    validCells.forEach((cell) => {\n      if (typeof cell.min_lat === \"number\" && !isNaN(cell.min_lat)) {\n        minLat = Math.min(minLat, cell.min_lat);\n      }\n      if (typeof cell.max_lat === \"number\" && !isNaN(cell.max_lat)) {\n        maxLat = Math.max(maxLat, cell.max_lat);\n      }\n      const cellMinLng = cell.min_lon || cell.min_lng;\n      const cellMaxLng = cell.max_lon || cell.max_lng;\n      if (typeof cellMinLng === \"number\" && !isNaN(cellMinLng)) {\n        minLng = Math.min(minLng, cellMinLng);\n      }\n      if (typeof cellMaxLng === \"number\" && !isNaN(cellMaxLng)) {\n        maxLng = Math.max(maxLng, cellMaxLng);\n      }\n    });\n\n    // Calculate center of the grid\n    const gridCenterLat = (minLat + maxLat) / 2;\n    const gridCenterLng = (minLng + maxLng) / 2;\n\n    console.log(\n      `Grid Center: ${gridCenterLat.toFixed(6)}, ${gridCenterLng.toFixed(6)}`\n    );\n    console.log(\n      `Grid Bounds: ${minLat.toFixed(6)}, ${minLng.toFixed(\n        6\n      )} to ${maxLat.toFixed(6)}, ${maxLng.toFixed(6)}`\n    );\n    console.log(`Processing ${validCells.length} valid cells`);\n\n    for (const cell of validCells) {\n      // Handle both min_lon/max_lon and min_lng/max_lng formats\n      const cellMinLng = cell.min_lon || cell.min_lng;\n      const cellMaxLng = cell.max_lon || cell.max_lng;\n\n      // Skip if coordinates are invalid (already filtered but double-check)\n      if (!cell.min_lat || !cell.max_lat || !cellMinLng || !cellMaxLng) {\n        console.warn(\n          `Skipping cell ${cell.id} due to missing coordinates:`,\n          cell\n        );\n        continue;\n      }\n\n      // Create rectangle bounds\n      const bounds = new window.google.maps.LatLngBounds(\n        new window.google.maps.LatLng(cell.min_lat, cellMinLng),\n        new window.google.maps.LatLng(cell.max_lat, cellMaxLng)\n      );\n\n      // Determine color based on incident count and predictions\n      const incidentCount = Array.isArray(cell.incidents)\n        ? cell.incidents.length\n        : 0;\n      const predictedCount = Array.isArray(cell.predicted)\n        ? cell.predicted.length\n        : 0;\n      \n      let fillColor = \"#00FF00\"; // Green for no incidents\n      let strokeColor = \"#00AA00\";\n\n      if (incidentCount > 0) {\n        // Red for any incidents\n        fillColor = \"#FF0000\";\n        strokeColor = \"#CC0000\";\n      } else if (predictedCount > 0) {\n        // Yellow for no incidents but has predictions\n        fillColor = \"#FFFF00\";\n        strokeColor = \"#CCCC00\";\n      }\n      // Otherwise stays green (no incidents, no predictions)\n\n      // Create rectangle\n      const rectangle = new window.google.maps.Rectangle({\n        bounds: bounds,\n        fillColor: fillColor,\n        fillOpacity: 0.3,\n        strokeColor: strokeColor,\n        strokeOpacity: 0.8,\n        strokeWeight: 1,\n        map: map,\n      });\n\n      // Calculate center for geocoding\n      const centerLat = (cell.min_lat + cell.max_lat) / 2;\n      const centerLng = (cellMinLng + cellMaxLng) / 2;\n\n      // Add hover listeners with improved reliability\n      let hoverTimeout = null;\n      let isHovered = false;\n      \n      rectangle.addListener(\"mouseover\", async (event) => {\n        isHovered = true;\n        \n        // Clear any existing timeout\n        if (hoverTimeout) {\n          clearTimeout(hoverTimeout);\n          hoverTimeout = null;\n        }\n\n        // Change rectangle appearance on hover immediately\n        rectangle.setOptions({\n          fillOpacity: 0.6,\n          strokeWeight: 3,\n        });\n\n        // Show basic info window immediately\n        const basicContent = `\n          <div style=\"padding: 12px; min-width: 280px; font-family: Arial, sans-serif;\">\n            <h6 style=\"margin: 0 0 10px 0; color: #333; font-weight: bold; border-bottom: 2px solid #007bff; padding-bottom: 5px;\">\n              📍 ${cell.id || \"Unknown Cell\"}\n            </h6>\n            <div style=\"margin-bottom: 8px;\">\n              <strong>📍 Location:</strong> <span style=\"color: #999;\">Loading...</span>\n            </div>\n            <div style=\"margin-bottom: 8px;\">\n              <strong>🌍 Coordinates:</strong><br>\n              <small style=\"color: #666;\">\n                Center: ${centerLat.toFixed(6)}, ${centerLng.toFixed(6)}\n              </small>\n            </div>\n          </div>\n        `;\n\n        // Show info window immediately\n        if (infoWindow && isHovered) {\n          infoWindow.setContent(basicContent);\n          infoWindow.setPosition({ lat: centerLat, lng: centerLng });\n          infoWindow.open(map);\n        }\n\n        // Get location name and update content\n        try {\n          const locationName = await getLocationName(centerLat, centerLng);\n          \n          // Only update if still hovering\n          if (!isHovered) return;\n\n          // Format timestamp\n        let formattedTimestamp = \"N/A\";\n        if (cell.timestamp) {\n          try {\n            const timestamp = cell.timestamp.toDate\n              ? cell.timestamp.toDate()\n              : new Date(cell.timestamp);\n            formattedTimestamp = timestamp.toLocaleString();\n          } catch (error) {\n            console.warn(\"Error formatting timestamp for cell\", cell.id, error);\n          }\n        }\n\n        // Format incidents\n        const incidentsText =\n          Array.isArray(cell.incidents) && cell.incidents.length > 0\n            ? cell.incidents.join(\", \")\n            : \"No incidents reported\";\n\n        // Format predictions\n        const predictedText =\n          Array.isArray(cell.predicted) && cell.predicted.length > 0\n            ? cell.predicted.join(\", \")\n            : \"No predictions\";\n\n        // Get severity level\n        const getSeverityLevel = (incidentCount, predictedCount) => {\n          if (incidentCount > 0)\n            return { text: \"Active Incidents\", color: \"#dc3545\", icon: \"�\" };\n          if (predictedCount > 0)\n            return { text: \"Predicted Risk\", color: \"#ffc107\", icon: \"�\" };\n          return { text: \"Safe\", color: \"#28a745\", icon: \"�\" };\n        };\n\n        const severity = getSeverityLevel(incidentCount, Array.isArray(cell.predicted) ? cell.predicted.length : 0);\n\n        // Create info window content\n        const content = `\n          <div style=\"padding: 12px; min-width: 280px; font-family: Arial, sans-serif;\">\n            <h6 style=\"margin: 0 0 10px 0; color: #333; font-weight: bold; border-bottom: 2px solid #007bff; padding-bottom: 5px;\">\n              📍 ${cell.id || \"Unknown Cell\"}\n            </h6>\n            <div style=\"margin-bottom: 8px;\">\n              <strong>📍 Location:</strong> ${locationName}\n            </div>\n            <div style=\"margin-bottom: 8px;\">\n              <strong>🌍 Coordinates:</strong><br>\n              <small style=\"color: #666;\">\n                Center: ${centerLat.toFixed(6)}, ${centerLng.toFixed(6)}<br>\n                Bounds: ${cell.min_lat.toFixed(4)}-${cell.max_lat.toFixed(\n          4\n        )}, ${cellMinLng.toFixed(4)}-${cellMaxLng.toFixed(4)}\n              </small>\n            </div>\n            <div style=\"margin-bottom: 8px;\">\n              <strong>⚠️ Status:</strong>\n              <span style=\"color: ${\n                severity.color\n              }; font-weight: bold; margin-left: 5px;\">\n                ${severity.icon} ${severity.text} (${incidentCount} incidents${Array.isArray(cell.predicted) && cell.predicted.length > 0 ? `, ${cell.predicted.length} predictions` : ''})\n              </span>\n            </div>\n            <div style=\"margin-bottom: 8px;\">\n              <strong>📋 Current Incidents:</strong><br>\n              <small style=\"color: #666; font-style: ${\n                incidentCount === 0 ? \"italic\" : \"normal\"\n              }; background-color: #f8f9fa; padding: 4px; border-radius: 4px; display: block;\">\n                ${incidentsText}\n              </small>\n            </div>\n            <div style=\"margin-bottom: 8px;\">\n              <strong>🔮 Predicted Issues:</strong><br>\n              <small style=\"color: #666; font-style: ${\n                Array.isArray(cell.predicted) && cell.predicted.length > 0 ? \"normal\" : \"italic\"\n              }; background-color: #fff3cd; padding: 4px; border-radius: 4px; display: block;\">\n                ${predictedText}\n              </small>\n            </div>\n            <div style=\"margin-bottom: 8px;\">\n              <strong>🕒 Last Updated:</strong><br>\n              <small style=\"color: #666;\">${formattedTimestamp}</small>\n            </div>\n            <div style=\"margin-top: 10px; padding-top: 8px; border-top: 1px solid #eee; text-align: center;\">\n              <small style=\"color: #999;\">Hover to view • Click for details</small>\n            </div>\n          </div>\n        `;\n\n        // Show info window\n        if (infoWindow) {\n          infoWindow.setContent(content);\n          infoWindow.setPosition({ lat: centerLat, lng: centerLng });\n          infoWindow.open(map);\n        }\n        } catch (error) {\n          console.error(\"Error getting location name:\", error);\n          // Continue with basic info window even if location name fails\n        }\n      });\n\n      rectangle.addListener(\"mouseout\", () => {\n        isHovered = false;\n        \n        // Reset rectangle appearance\n        rectangle.setOptions({\n          fillOpacity: 0.3,\n          strokeWeight: 1,\n        });\n\n        // Close info window after a short delay\n        setTimeout(() => {\n          if (infoWindow) {\n            infoWindow.close();\n          }\n        }, 200);\n      });\n\n      // Add click listener for more detailed view\n      rectangle.addListener(\"click\", () => {\n        map.fitBounds(bounds);\n        map.setZoom(Math.min(map.getZoom() + 2, 18));\n      });\n\n      newRectangles.push(rectangle);\n    }\n\n    console.log(\n      `Created ${newRectangles.length} rectangles out of ${validCells.length} valid cells`\n    );\n    setRectangles(newRectangles);\n\n    // Center map on the grid data - only if we have valid bounds\n    if (\n      validCells.length > 0 &&\n      !isNaN(minLat) &&\n      !isNaN(maxLat) &&\n      !isNaN(minLng) &&\n      !isNaN(maxLng)\n    ) {\n      // Create bounds object with padding\n      const mapBounds = new window.google.maps.LatLngBounds(\n        new window.google.maps.LatLng(minLat - 0.005, minLng - 0.005),\n        new window.google.maps.LatLng(maxLat + 0.005, maxLng + 0.005)\n      );\n\n      // Fit map to show all grid cells\n      map.fitBounds(mapBounds);\n\n      // Update home marker position to grid center\n      if (homeMarker && !isNaN(gridCenterLat) && !isNaN(gridCenterLng)) {\n        homeMarker.setPosition({ lat: gridCenterLat, lng: gridCenterLng });\n        homeMarker.setTitle(\n          `Grid Center: ${gridCenterLat.toFixed(4)}, ${gridCenterLng.toFixed(\n            4\n          )} | ${validCells.length} cells`\n        );\n      }\n    }\n  }, [cellData, map, homeMarker, infoWindow]);\n\n  // Create grid rectangles when map and cell data are ready\n  useEffect(() => {\n    if (map && cellData.length > 0 && window.google) {\n      createGridRectangles();\n    }\n  }, [map, cellData, createGridRectangles]);\n\n  return <div ref={ref} style={style} />;\n};\n\nconst MapWrapper = ({ center, zoom, style }) => {\n  const render = (status) => {\n    switch (status) {\n      case Status.LOADING:\n        return (\n          <div\n            className=\"d-flex justify-content-center align-items-center\"\n            style={style}\n          >\n            <div className=\"spinner-border text-primary\" role=\"status\">\n              <span className=\"visually-hidden\">Loading...</span>\n            </div>\n          </div>\n        );\n      case Status.FAILURE:\n        return (\n          <div className=\"alert alert-danger m-3\" role=\"alert\">\n            <h4 className=\"alert-heading\">Error Loading Map</h4>\n            <p>\n              Failed to load Google Maps. Please check your API key and internet\n              connection.\n            </p>\n            <hr />\n            <p className=\"mb-0\">\n              Make sure to replace 'YOUR_GOOGLE_MAPS_API_KEY' with your actual\n              Google Maps API key in MapComponent.js\n            </p>\n          </div>\n        );\n      case Status.SUCCESS:\n        return <MapComponent center={center} zoom={zoom} style={style} />;\n      default:\n        return null;\n    }\n  };\n\n  return <Wrapper apiKey={GOOGLE_MAPS_API_KEY} render={render} />;\n};\n\nexport default MapWrapper;\n","import { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport MapWrapper from \"./MapComponent\";\n\nconst Maps = () => {\n  const [loading, setLoading] = useState(true);\n  const [gridLoaded, setGridLoaded] = useState(false);\n  const [isDashboardCollapsed, setIsDashboardCollapsed] = useState(false);\n\n  useEffect(() => {\n    // Simulate loading time for map initialization\n    const timer = setTimeout(() => {\n      setLoading(false);\n      setGridLoaded(true);\n    }, 3000);\n    return () => clearTimeout(timer);\n  }, []);\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        width: \"100vw\",\n        margin: 0,\n        padding: 0,\n        overflow: \"hidden\",\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n      }}\n    >\n      {/* Navigation Bar with Home Button */}\n      <nav\n        className=\"navbar navbar-expand-lg navbar-dark bg-dark shadow-sm\"\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          right: 0,\n          zIndex: 1000,\n          margin: 0,\n        }}\n      >\n        <div className=\"container-fluid px-4\">\n          <span className=\"navbar-brand fw-bold fs-4\">CityPulse Maps</span>\n\n          {/* Home Button */}\n          <div className=\"d-flex\">\n            <Link to=\"/home\" className=\"nav-link text-white me-4\">\n              <Button variant=\"outline-light\" className=\"rounded-3 px-3\">\n                Home\n              </Button>\n            </Link>\n          </div>\n\n          <div className=\"d-flex align-items-center ms-auto\">\n            {/* Add any additional navbar items here */}\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Maps Content Area - Full Screen */}\n      <main\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100vw\",\n          height: \"100vh\",\n          margin: 0,\n          padding: 0,\n        }}\n      >\n        <MapWrapper\n          center={{ lat: 12.95, lng: 77.635 }} // Centered around your cell data coordinates\n          zoom={11} // Lower zoom to see more area and grid coverage\n          style={{\n            width: \"100vw\",\n            height: \"100vh\",\n            margin: 0,\n            padding: 0,\n          }}\n        />\n\n        {/* Optional overlay panel for controls/info */}\n        <div\n          className=\"position-absolute\"\n          style={{\n            top: \"80px\",\n            left: \"16px\",\n            zIndex: 1000,\n          }}\n        >\n          <div\n            className=\"card shadow-sm\"\n            style={{\n              width: isDashboardCollapsed ? \"auto\" : \"300px\",\n              backgroundColor: \"rgba(255, 255, 255, 0.95)\",\n              transition: \"all 0.3s ease-in-out\",\n            }}\n          >\n            <div className=\"card-header bg-primary text-white d-flex justify-content-between align-items-center\">\n              {!isDashboardCollapsed && <h6 className=\"mb-0\">CityPulse Dashboard</h6>}\n              <Button\n                variant=\"link\"\n                size=\"sm\"\n                className=\"text-white p-0\"\n                onClick={() => setIsDashboardCollapsed(!isDashboardCollapsed)}\n                style={{ textDecoration: \"none\" }}\n              >\n                {isDashboardCollapsed ? \"📊\" : \"➖\"}\n              </Button>\n            </div>\n            {!isDashboardCollapsed && (\n              <div className=\"card-body p-3\">\n                <p className=\"small mb-2 text-muted\">\n                  Interactive city analytics and real-time data visualization\n                </p>\n                {loading && (\n                  <div className=\"mb-3\">\n                    <div\n                      className=\"spinner-border spinner-border-sm text-primary me-2\"\n                      role=\"status\"\n                    >\n                      <span className=\"visually-hidden\">Loading...</span>\n                    </div>\n                    <small className=\"text-muted\">Loading cell data...</small>\n                  </div>\n                )}\n\n                {!loading && gridLoaded && (\n                  <div className=\"mb-3\">\n                    <div\n                      className=\"alert alert-success py-2 mb-2\"\n                      role=\"alert\"\n                      style={{ fontSize: \"0.8rem\" }}\n                    >\n                      ✅ Grid loaded successfully!\n                    </div>\n                  </div>\n                )}\n\n                {/* Grid Legend */}\n                <div className=\"mb-3\" style={{ fontSize: \"0.8rem\" }}>\n                  <div className=\"fw-bold mb-2\">Grid Color Legend:</div>\n                  <div className=\"d-flex flex-wrap gap-1\">\n                    <span\n                      className=\"badge\"\n                      style={{ backgroundColor: \"#00FF00\", color: \"#000\" }}\n                    >\n                      Safe\n                    </span>\n                    <span\n                      className=\"badge\"\n                      style={{ backgroundColor: \"#FFFF00\", color: \"#000\" }}\n                    >\n                      Predicted Risk\n                    </span>\n                    <span\n                      className=\"badge\"\n                      style={{ backgroundColor: \"#FF0000\", color: \"#fff\" }}\n                    >\n                      High Risk\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"d-flex gap-2 mb-2\">\n                  <button className=\"btn btn-sm btn-outline-primary flex-fill\">\n                    Filters\n                  </button>\n                  <button className=\"btn btn-sm btn-outline-secondary flex-fill\">\n                    Layers\n                  </button>\n                </div>\n\n                <div className=\"d-flex gap-2 mb-2\">\n                  <button\n                    className=\"btn btn-sm btn-warning w-100\"\n                    onClick={() => {\n                      console.log(\"Reloading grid for current view...\");\n                      window.location.reload();\n                    }}\n                  >\n                    🔄 Reload Grid for Current View\n                  </button>\n                </div>\n                <div className=\"mt-2\">\n                  <small className=\"text-muted\">\n                    🏠 Blue marker shows grid center\n                    <br />\n                    📍 Hover over grid cells to view details\n                    <br />\n                    🔍 Click cells to zoom in\n                  </small>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default Maps;\n","import { Navigate } from \"react-router-dom\";\nimport { useUserAuth } from \"../context/UserAuthContext\";\nconst ProtectedRoute = ({ children }) => {\n  const { user } = useUserAuth();\n\n  console.log(\"Check user in Private: \", user);\n  if (!user) {\n    return <Navigate to=\"/\" />;\n  }\n  return children;\n};\n\nexport default ProtectedRoute;\n","import { useState } from \"react\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useUserAuth } from \"../context/UserAuthContext\";\n\nconst Signup = () => {\n  const [email, setEmail] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { signUp } = useUserAuth();\n  let navigate = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    try {\n      await signUp(email, password);\n      navigate(\"/\");\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  return (\n    <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center bg-light\">\n      <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\n        <div className=\"p-5 bg-white rounded-3 shadow-sm\">\n          <div className=\"text-center mb-4\">\n            <h2 className=\"fw-bold mb-1\" style={{ color: \"#212529\" }}>\n              Create Account\n            </h2>\n            <p className=\"text-muted\">Join CityPulse Admin Dashboard</p>\n          </div>\n\n          {error && (\n            <Alert variant=\"danger\" className=\"rounded-2\">\n              {error}\n            </Alert>\n          )}\n\n          <Form onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Email address\"\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"py-2 border-2\"\n                style={{ borderColor: \"#dee2e6\", borderRadius: \"8px\" }}\n              />\n            </Form.Group>\n\n            <Form.Group className=\"mb-4\" controlId=\"formBasicPassword\">\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Create password\"\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"py-2 border-2\"\n                style={{ borderColor: \"#dee2e6\", borderRadius: \"8px\" }}\n              />\n            </Form.Group>\n\n            <Button\n              variant=\"dark\"\n              type=\"submit\"\n              className=\"w-100 py-2 mb-3 rounded-3 fw-bold\"\n              style={{ backgroundColor: \"#212529\", border: \"none\" }}\n            >\n              Sign Up\n            </Button>\n          </Form>\n\n          <div className=\"text-center text-muted mt-4\">\n            Already have an account?{\" \"}\n            <Link\n              to=\"/\"\n              className=\"text-decoration-none fw-bold\"\n              style={{ color: \"#212529\" }}\n            >\n              Log In\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Signup;\n","import { Col, Container, Row } from \"react-bootstrap\";\nimport { Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Maps from \"./components/Maps\";\nimport ProtectedRoute from \"./components/ProtectedRoute\";\nimport Signup from \"./components/Signup\";\nimport { UserAuthContextProvider } from \"./context/UserAuthContext\";\n\nfunction App() {\n  return (\n    <UserAuthContextProvider>\n      <Routes>\n        <Route\n          path=\"/home\"\n          element={\n            <Container style={{ width: \"1700px\" }}>\n              <Row>\n                <Col>\n                  <ProtectedRoute>\n                    <Home />\n                  </ProtectedRoute>\n                </Col>\n              </Row>\n            </Container>\n          }\n        />\n        <Route\n          path=\"/\"\n          element={\n            <Container style={{ width: \"400px\" }}>\n              <Row>\n                <Col>\n                  <Login />\n                </Col>\n              </Row>\n            </Container>\n          }\n        />\n        <Route\n          path=\"/signup\"\n          element={\n            <Container style={{ width: \"400px\" }}>\n              <Row>\n                <Col>\n                  <Signup />\n                </Col>\n              </Row>\n            </Container>\n          }\n        />\n        <Route path=\"/maps\" element={<Maps />} />\n      </Routes>\n    </UserAuthContextProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}